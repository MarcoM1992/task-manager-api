warning: in the working copy of '.gitignore', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 667aaef..f1dfd7a 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -31,3 +31,13 @@[m [mbuild/[m
 [m
 ### VS Code ###[m
 .vscode/[m
[32m+[m
[32m+[m[32m### Temp File DB and Log ###[m
[32m+[m[32m*.log[m
[32m+[m[32m*.db[m
[32m+[m[32m*.sqlite[m
[32m+[m
[32m+[m[32m### Sensitive local properties ###[m
[32m+[m[32mapplication.properties[m
[32m+[m[32mapplication.yml[m
[32m+[m[32m.env[m
[1mdiff --git a/README.md b/README.md[m
[1mindex 36bb829..2b3168f 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,2 +1,167 @@[m
[31m-# task-manager-api[m
[31m-REST API Spring Boot con Swagger UI e autenticazione JWT[m
[32m+[m[32m# Task Manager API[m
[32m+[m
[32m+[m[32mA Spring Boot RESTful API for managing users, roles, and tasks. The API supports JWT authentication, role-based access control, and task assignment to users.[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## **Features**[m
[32m+[m
[32m+[m[32m- User management[m
[32m+[m[32m  - Register, update, delete users[m
[32m+[m[32m  - Role assignment and management (ADMIN, USER)[m
[32m+[m[32m- Task management[m
[32m+[m[32m  - Create, update, delete tasks[m
[32m+[m[32m  - Assign tasks to users[m
[32m+[m[32m- JWT-based authentication and authorization[m
[32m+[m[32m- Secure endpoints with role-based access[m
[32m+[m[32m- User account validation via email token[m
[32m+[m[32m- Date and timezone-aware task handling[m
[32m+[m[32m- Swagger documentation for API endpoints[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## **Technologies Used**[m
[32m+[m
[32m+[m[32m- Java 17[m
[32m+[m[32m- Spring Boot 3.x[m
[32m+[m[32m- Spring Security[m
[32m+[m[32m- JWT (JSON Web Tokens)[m
[32m+[m[32m- JPA / Hibernate[m
[32m+[m[32m- Maven[m
[32m+[m[32m- PostgreSQL / MySQL (or any relational DB)[m
[32m+[m[32m- Swagger OpenAPI 3[m
[32m+[m[32m- SLF4J / Logback for logging[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## **Project Structure**[m
[32m+[m[32msrc/[m
[32m+[m[32mâ”œâ”€ main/[m
[32m+[m[32mâ”‚  â”œâ”€ java/[m
[32m+[m[32mâ”‚  â”‚  â””â”€ it/[m
[32m+[m[32mâ”‚  â”‚     â””â”€ marmas/[m
[32m+[m[32mâ”‚  â”‚        â””â”€ task/[m
[32m+[m[32mâ”‚  â”‚           â””â”€ manager/[m
[32m+[m[32mâ”‚  â”‚              â””â”€ api/[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ auth/         # JWT utilities[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ security/     # Spring Security config & filters[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ service/      # Business logic[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ repo/         # Repository layer (EntityManager based)[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ model/        # JPA Entities[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ dto/          # Data Transfer Objects[m
[32m+[m[32mâ”‚  â”‚                 â”œâ”€ mapper/       # Entity <-> DTO mappers[m
[32m+[m[32mâ”‚  â”‚                 â””â”€ util/         # Utility classes[m
[32m+[m[32mâ”‚  â””â”€ resources/[m
[32m+[m[32mâ”‚     â”œâ”€ application.properties[m
[32m+[m[32mâ”‚     â”œâ”€ static/[m
[32m+[m[32mâ”‚     â””â”€ templates/[m
[32m+[m[32mâ””â”€ test/[m
[32m+[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## **Getting Started**[m
[32m+[m
[32m+[m[32m### **Prerequisites**[m
[32m+[m
[32m+[m[32m- Java 17+[m
[32m+[m[32m- Maven 3.8+[m
[32m+[m[32m- PostgreSQL / MySQL / any supported RDBMS[m
[32m+[m[32m- Git[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m### **Setup**[m
[32m+[m
[32m+[m[32m1. Clone the repository:[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mgit clone https://github.com/MarcoM1992/task-manager-api.git[m
[32m+[m
[32m+[m[32mcd task-manager-api[m
[32m+[m[32mConfigure your database connection in application.properties:[m
[32m+[m
[32m+[m[32mproperties[m
[32m+[m[32mCopy code[m
[32m+[m[32mspring.datasource.url=jdbc:postgresql://localhost:3306/taskmanager[m
[32m+[m[32mspring.datasource.username=YOUR_DB_USERNAME[m
[32m+[m[32mspring.datasource.password=YOUR_DB_PASSWORD[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mjwt.secret=YOUR_JWT_SECRET_KEY[m
[32m+[m[32mBuild and run:[m
[32m+[m
[32m+[m[32mbash[m
[32m+[m[32mCopy code[m
[32m+[m[32mmvn clean install[m
[32m+[m[32mmvn spring-boot:run[m
[32m+[m
[32m+[m[32mAPI Documentation[m
[32m+[m
[32m+[m[32mSwagger UI is available at:[m
[32m+[m
[32m+[m[32mhttp://localhost:8080/swagger-ui/index.html[m
[32m+[m
[32m+[m
[32m+[m[32mThis provides interactive documentation for all API endpoints, including request/response models.[m
[32m+[m
[32m+[m[32mAuthentication[m
[32m+[m[32m## **Endpoints Overview**[m
[32m+[m
[32m+[m[32m- **Auth endpoints** (`/auth/**`)[m
[32m+[m[32m  - Register new users (`/auth/register`)[m
[32m+[m[32m  - Login and obtain JWT token (`/auth/login`)[m
[32m+[m[32m  - Token validation[m
[32m+[m[32m  - Implementato in: `it.marmas.task.manager.api.auth`[m
[32m+[m
[32m+[m[32m- **User endpoints** (`/user/**`)[m
[32m+[m[32m  - Create, update, delete, get users[m
[32m+[m[32m  - Assign/remove tasks to users[m
[32m+[m[32m  - Role assignment and management[m
[32m+[m[32m  - Implementato in: `it.marmas.task.manager.api.service`, `it.marmas.task.manager.api.model`, `it.marmas.task.manager.api.dto`, `it.marmas.task.manager.api.mapper`[m
[32m+[m
[32m+[m[32m- **Task endpoints** (`/task/**`)[m
[32m+[m[32m  - Create, update, delete tasks[m
[32m+[m[32m  - Query tasks by username or date range[m
[32m+[m[32m  - Assign tasks to users[m
[32m+[m[32m  - Implementato in: `it.marmas.task.manager.api.service`, `it.marmas.task.manager.api.model`, `it.marmas.task.manager.api.dto`, `it.marmas.task.manager.api.mapper`[m
[32m+[m
[32m+[m[32m- **Admin endpoints** (`/ADMIN/**`)[m
[32m+[m[32m  - Manage roles and users[m
[32m+[m[32m  - Full access for ADMIN role[m
[32m+[m[32m  - Implementato in: `it.marmas.task.manager.api.security`[m
[32m+[m
[32m+[m[32m- **Security & JWT**[m
[32m+[m[32m  - JWT-based authentication and authorization[m
[32m+[m[32m  - Role-based access control[m
[32m+[m[32m  - Implementato in: `it.marmas.task.manager.api.security`, `it.marmas.task.manager.api.auth`[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m**Note:**[m[41m  [m
[32m+[m[32m- JWT Token: Include `Authorization: Bearer <token>` in request headers for protected endpoints.[m
[32m+[m[32m- Role-based access:[m[41m  [m
[32m+[m[32m  - `ADMIN` â†’ Full access[m[41m  [m
[32m+[m[32m  - `USER` â†’ Limited access to own tasks[m
[32m+[m
[32m+[m[32mSwagger UI disponibile su:[m[41m  [m
[32m+[m[32m`http://localhost:8080/swagger[m
[32m+[m
[32m+[m[32mLicense[m
[32m+[m
[32m+[m[32mThis project is licensed under the MIT License. See LICENSE file for details.[m
[32m+[m
[32m+[m[32mContributing[m
[32m+[m
[32m+[m[32mFork the repository[m
[32m+[m
[32m+[m[32mCreate a feature branch (git checkout -b feature/my-feature)[m
[32m+[m
[32m+[m[32mCommit changes (git commit -am 'Add new feature')[m
[32m+[m
[32m+[m[32mPush to branch (git push origin feature/my-feature)[m
[32m+[m
[32m+[m[32mOpen a pull request[m
[32m+[m
[32m+[m
[32m+[m[32m---[m
[41m+ [m
\ No newline at end of file[m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex 1251a6d..0ce4596 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -16,7 +16,7 @@[m [mspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect[m
 spring.jpa.properties.hibernate.jdbc.time_zone=UTC[m
 [m
 # === jwt ===[m
[31m-jwt.secret=laTuaChiaveSegretaMoltoLungaBase64Encoded==[m
[32m+[m[32mjwt.secret=${SECRET_KEY}[m
 [m
 #15 minutes[m
 jwt.access_token_validity=900000[m
